{"version":3,"file":"static/js/956.06d4e972.chunk.js","mappings":"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","sources":["components/redux/contacts/selectors.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.browser.js","components/ContactsForm/ContactsForm.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const seectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectContact = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n    [selectContact, selectFilter],\n    (contacts, filter) => {\n      return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()))\n    }\n)","import React from \"react\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { deleteContact } from \"components/redux/contacts/operations\";\nimport { selectVisibleContacts } from \"components/redux/contacts/selectors\";\n\n\nconst ContactList = () => {\n    const contacts = useSelector(selectVisibleContacts);\n    const dispatch = useDispatch();\n   \n    return (\n        <div>\n            <ul>\n                {contacts && contacts.map(contact => (\n                    <li key={contact.id}>\n                        {contact.name + ': ' + contact.number}\n                        {<button\n                            type='button'\n                            name='delete'\n                            onClick={() => dispatch(deleteContact(contact.id))}\n                            >delete</button>}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    )\n};\n\nexport default ContactList;\n","\n\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectFilter } from \"components/redux/contacts/selectors\";\nimport { changeFilter } from \"components/redux/contacts/filterSlice\";\n\n\nconst Filter = () => {\n    const value = useSelector(selectFilter);\n    const dispatch = useDispatch();\n\n    const onChange = evt => {\n        const normalizedValue = evt.target.value.toLowerCase();\n\n        dispatch(changeFilter(normalizedValue));\n    }\n\n    return (\n        <div>\n            <label>\n                Find contacts by name\n                <input\n                    type=\"text\"\n                    value={value}\n                    onChange={onChange}\n                />\n            </label>\n             \n        </div>\n    )\n};\n\nexport default Filter;\n","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << Math.log2(alphabet.length - 1)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n","\n\nimport { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport React from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { selectContact } from 'components/redux/contacts/selectors';\nimport { addContact } from 'components/redux/contacts/operations';\n\n\nconst nameId = nanoid();\nconst numberId = nanoid();\n\nexport default function ContactForm(){\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectContact);\n  \n  const dispatch = useDispatch();\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n\n    const anExistingContact = contacts.some(contact => contact.name.toLowerCase().trim() === name.toLowerCase().trim());\n  \n  if (anExistingContact) {\n    alert(`${name} is already in contacts`);\n    return;\n  }\n  \n  dispatch(addContact({ name, number }));\n  setName('');\n  setNumber('');\n  };\n  \n  const handleChange = evt => {\n    const { name, value } = evt.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\nreturn (\n  <form onSubmit = {handleSubmit}>\n    <label htmlFor={nameId}>Name</label>\n        <input type=\"text\" name=\"name\" value={name} onChange={handleChange} required/>\n        \n    \n\n    <label htmlFor={numberId}>Number</label>\n        <input type='tel' name=\"number\" value={number} onChange={handleChange} required/>\n        \n\n      <button type=\"submit\">Add contact</button>\n    \n\n  </form>\n)\n};\n\n\n\n\n","\nimport { fetchContacts } from \"components/redux/contacts/operations\";\n// import { seectIsLoading } from \"components/redux/contacts/selectors\";\nimport { useEffect } from \"react\";\nimport { useDispatch} from \"react-redux\";\nimport ContactList from \"components/ContactsList/ContactsList\";\nimport Filter from \"components/Filter/Filter\";\n\nimport ContactForm from \"components/ContactsForm/ContactsForm\";\n\nexport default function Contacts() {\n    const dispatch = useDispatch();\n    // const isLoading = useSelector(seectIsLoading);\n\n    useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n    return (\n        <>\n            <h1>Your contacts!</h1>\n            <ContactForm />\n            <Filter/>\n            <ContactList />\n        </>\n    )\n}\n\n\n\n\n "],"names":["selectContact","state","contacts","items","selectFilter","filter","selectVisibleContacts","createSelector","contact","name","toLowerCase","includes","useSelector","dispatch","useDispatch","_jsx","children","map","_jsxs","number","type","onClick","deleteContact","id","value","onChange","evt","normalizedValue","target","changeFilter","urlAlphabet","nanoid","size","arguments","length","undefined","bytes","crypto","getRandomValues","Uint8Array","scopedUrlAlphabet","nameId","numberId","ContactForm","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","setNumber","handleChange","_evt$target","onSubmit","preventDefault","some","trim","alert","concat","addContact","htmlFor","required","Contacts","useEffect","fetchContacts","_Fragment","Filter","ContactList"],"sourceRoot":""}